name: CICD

on: [push]

env:
  DOMAIN: flowbrew.ru
  TEST_REPOSITORY: test-website-deployment
  ORGANIZATION: ${{ github.event.organization.login }}
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  WEBSITE_REPO: flowbrew/website-deployment
  SCRIPTS_PATH: .github/workflows/scripts
  REPOSITORY: ${{ github.repository }}
  WORKFLOW: ${{ github.workflow }}
  EVENT_NAME: ${{ github.event_name }}
  HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
  HEAD_COMMIT_URL: ${{ github.event.head_commit.url }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    container:
      image: ntoss/builder:latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Saving branch name to ${BRANCH_NAME}
      - uses: nelonoel/branch-name@v1

      - uses: actions/checkout@v1
      - name: Install pybrew
        run: |
          pip install requests toolz fn
          pip install ./pybrew
          pytest -vv --color=yes --pyargs pybrew \
            --runslow \
            --SECRET_SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }} \
            --SECRET_GITHUB_WEBSITE_USERNAME=${{secrets.GITHUB_WEBSITE_USERNAME}} \
            --SECRET_GITHUB_WEBSITE_TOKEN=${{secrets.GITHUB_WEBSITE_TOKEN}} \
            --SHA=${{ github.sha }} \
            --BRANCH=${{ env.BRANCH_NAME }} \
            --TEST_REPOSITORY=${{ env.TEST_REPOSITORY }} \
            --ORGANIZATION=${{ env.ORGANIZATION }}

      - name: Deploy Jekyll
        shell: python
        run: |
          from pybrew import cicd_io

          cicd_io(
            github_username: '${{ secrets.GITHUB_WEBSITE_USERNAME }}',
            github_token: '${{ secrets.GITHUB_WEBSITE_TOKEN }}',
            organization: '${{ env.ORGANIZATION }}',
            repo_name: '${{ env.REPOSITORY_NAME }}',
            branch: '${{ env.BRANCH_NAME }}',
            repo_path: '${{ github.repository }}',
            sha: '${{ github.sha }}',
          )

      - name: Notify
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
          SECRET_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: ${{ env.SCRIPTS_PATH }}/notifier.py
